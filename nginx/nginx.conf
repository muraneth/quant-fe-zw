user root;
worker_processes  auto;  # Use auto for better performance based on available CPU cores

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    gzip  on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    gzip_buffers 16 8k;
    gzip_types text/html text/css image/jpeg application/javascript image/png image/svg+xml image/tiff image/webp application/font-woff application/json;
    gzip_vary on;
    gzip_disable "msie6";

    gzip_static on;  # Serve pre-compressed files if available

    
    server {
        server_name www.tokenalytic.com tokenalytic.com studio.tokenalytic.com www.studio.tokenalytic.com;
        
        location ~ .*\.html?$ {
            root /home/ecs-user/project/quant-fe/docker/quant-fe/static;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header Cache-Control "public, max-age=31536000";  # Caching for 1 year
        }

        location ~ .*.(js|css|png|jpg|jpeg|svg|eot|woff2|ttf)$ {
            root /home/ecs-user/project/quant-fe/docker/quant-fe/static;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header Cache-Control "public, max-age=15552000";  # Caching for 6 months
        }

        location / {
            root /home/ecs-user/project/quant-fe/docker/quant-fe/static;
            index index.html;
            try_files $uri /index.html;
        }

        location /data/ {
            proxy_pass http://127.0.0.1:5005;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    

        #listen 443 ssl; # managed by Certbot
        #ssl_certificate /etc/letsencrypt/live/tokenalytic.com/fullchain.pem; # managed by Certbot
        #ssl_certificate_key /etc/letsencrypt/live/tokenalytic.com/privkey.pem; # managed by Certbot
        #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    }
    server {
        server_name airflow.tokenalytic.com www.airflow.tokenalytic.com;
        
        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
    server {
        server_name docs.tokenalytic.com www.docs.tokenalytic.com;
        
        location / {
            proxy_pass http://127.0.0.1:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
    



    server {
            server_name www.tokenalytic.com tokenalytic.com;
            listen 80;
           # return 404; # managed by Certbot
           # if ($host = www.tokenalytic.com) {
           #     return 301 https://$host$request_uri;
           # } # managed by Certbot


            
	    #if ($host = tokenalytic.com) {
            #    return 301 https://$host$request_uri;
            #} # managed by Certbot

        }
        server {
        listen 80 default_server; # This makes it the default server for HTTP
        server_name _;            # Matches any request not explicitly handled

        # Return a 404 Not Found for unmatched requests
        # return 404;

        # Alternatively, you can redirect unmatched requests to a default domain
        return 301 https://tokenalytic.com$request_uri;
    }

}